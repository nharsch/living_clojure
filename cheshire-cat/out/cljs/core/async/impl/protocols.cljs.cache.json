["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$cljs.core.async.impl.protocols","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$remove!",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","~:line",31,"~:column",4,"~:end-line",31,"~:end-column",11,"~:protocol","~$cljs.core.async.impl.protocols/Buffer","~:doc",null,"~:arglists",["~#list",["~$quote",["^H",[["~$b"]]]]]],"^D","^E","^5","~$cljs.core.async.impl.protocols/remove!","^?","out/cljs/core/async/impl/protocols.cljs","^C",11,"~:method-params",["^H",[["~$b"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^A",1,"~:variadic?",false,"^@",29,"~:ret-tag","~$any","^B",31,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$b"]]]]],"^F",null],"~$close!",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",21,"^A",4,"^B",21,"^C",10,"^D","~$cljs.core.async.impl.protocols/Channel","^F",null,"^G",["^H",["^I",["^H",[["~$chan"]]]]]],"^D","^T","^5","~$cljs.core.async.impl.protocols/close!","^?","out/cljs/core/async/impl/protocols.cljs","^C",10,"^K",["^H",[["^U"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",20,"^O","^P","^B",21,"^Q",1,"^R",true,"^G",["^H",["^I",["^H",[["^U"]]]]],"^F",null],"~$Handler",["^ ","^>",["^ ","~:protocol-symbol",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",21,"^A",14,"^@",24,"~:protocol-info",["^ ","~:methods",["^ ","~$active?",[["~$h"]],"~$commit",[["~$h"]]]],"^B",24,"~:sigs",["^ ","~:active?",["^ ","^5","^[","^G",["^H",[["~$h"]]],"^F","returns true if has callback. Must work w/o lock"],"~:commit",["^ ","^5","^10","^G",["^H",[["~$h"]]],"^F","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"]],"~:jsdoc",["^H",["@interface"]]],"^X",true,"^5","~$cljs.core.async.impl.protocols/Handler","^?","out/cljs/core/async/impl/protocols.cljs","^C",21,"^A",1,"^@",24,"^Y",["^ ","^Z",["^ ","^[",[["~$h"]],"^10",[["~$h"]]]],"~:info",null,"^B",24,"~:tag","^P","^11",["^ ","^12",["^ ","^5","^[","^G",["^H",[["~$h"]]],"^F","returns true if has callback. Must work w/o lock"],"^13",["^ ","^5","^10","^G",["^H",[["~$h"]]],"^F","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"]],"~:impls",["^4",[]],"^14",["^H",["@interface"]]],"^[",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",25,"^A",4,"^B",25,"^C",11,"^D","^15","^F","returns true if has callback. Must work w/o lock","^G",["^H",["^I",["^H",[["~$h"]]]]]],"^D","^15","^5","~$cljs.core.async.impl.protocols/active?","^?","out/cljs/core/async/impl/protocols.cljs","^C",11,"^K",["^H",[["~$h"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",24,"^O","^P","^B",25,"^Q",1,"^R",true,"^G",["^H",["^I",["^H",[["~$h"]]]]],"^F","returns true if has callback. Must work w/o lock"],"~$Buffer",["^ ","^>",["^ ","^X",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",20,"^A",14,"^@",29,"^Y",["^ ","^Z",["^ ","~$full?",[["~$b"]],"^<",[["~$b"]],"~$add!*",[["~$b","~$itm"]]]],"^B",29,"^11",["^ ","~:full?",["^ ","^5","^1;","^G",["^H",[["~$b"]]],"^F",null],"~:remove!",["^ ","^5","^<","^G",["^H",[["~$b"]]],"^F",null],"~:add!*",["^ ","^5","^1<","^G",["^H",[["~$b","^1="]]],"^F",null]],"^14",["^H",["@interface"]]],"^X",true,"^5","^E","^?","out/cljs/core/async/impl/protocols.cljs","^C",20,"^A",1,"^@",29,"^Y",["^ ","^Z",["^ ","^1;",[["~$b"]],"^<",[["~$b"]],"^1<",[["~$b","^1="]]]],"^16",null,"^B",29,"^17","^P","^11",["^ ","^1>",["^ ","^5","^1;","^G",["^H",[["~$b"]]],"^F",null],"^1?",["^ ","^5","^<","^G",["^H",[["~$b"]]],"^F",null],"^1@",["^ ","^5","^1<","^G",["^H",[["~$b","^1="]]],"^F",null]],"^18",["^4",[]],"^14",["^H",["@interface"]]],"^1;",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",30,"^A",4,"^B",30,"^C",9,"^D","^E","^F",null,"^G",["^H",["^I",["^H",[["~$b"]]]]]],"^D","^E","^5","~$cljs.core.async.impl.protocols/full?","^?","out/cljs/core/async/impl/protocols.cljs","^C",9,"^K",["^H",[["~$b"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",29,"^O","^P","^B",30,"^Q",1,"^R",true,"^G",["^H",["^I",["^H",[["~$b"]]]]],"^F",null],"~$add!",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",34,"^A",7,"^B",34,"^C",11,"^G",["^H",["^I",["^H",[["~$b"],["~$b","^1="]]]]],"~:top-fn",["^ ","^N",false,"~:fixed-arity",2,"^Q",2,"^K",[["~$b"],["~$b","^1="]],"^G",["^H",[["~$b"],["~$b","^1="]]],"^M",["^H",[null,null]]]],"^5","~$cljs.core.async.impl.protocols/add!","^?","out/cljs/core/async/impl/protocols.cljs","^C",11,"^1C",["^ ","^N",false,"^1D",2,"^Q",2,"^K",[["~$b"],["~$b","^1="]],"^G",["^H",[["~$b"],["~$b","^1="]]],"^M",["^H",[null,null]]],"^K",[["~$b"],["~$b","^1="]],"^L",null,"^1D",2,"^M",["^H",[null,null]],"^A",1,"^N",false,"^Z",[["^ ","^1D",1,"^N",false],["^ ","^1D",2,"^N",false,"^17","^P"]],"^@",34,"^B",34,"^Q",2,"^R",true,"^G",["^H",[["~$b"],["~$b","^1="]]]],"^1<",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",32,"^A",4,"^B",32,"^C",9,"^D","^E","^F",null,"^G",["^H",["^I",["^H",[["~$b","^1="]]]]]],"^D","^E","^5","~$cljs.core.async.impl.protocols/add!*","^?","out/cljs/core/async/impl/protocols.cljs","^C",9,"^K",["^H",[["~$b","^1="]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",29,"^O","^P","^B",32,"^Q",2,"^R",true,"^G",["^H",["^I",["^H",[["~$b","^1="]]]]],"^F",null],"~$ReadPort",["^ ","^>",["^ ","^X",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",22,"^A",14,"^@",13,"^Y",["^ ","^Z",["^ ","~$take!",[["~$port","~$fn1-handler"]]]],"^B",13,"^11",["^ ","~:take!",["^ ","^5","^1H","^G",["^H",[["^1I","^1J"]]],"^F","derefable val if taken, nil if take was enqueued"]],"^14",["^H",["@interface"]]],"^X",true,"^5","~$cljs.core.async.impl.protocols/ReadPort","^?","out/cljs/core/async/impl/protocols.cljs","^C",22,"^A",1,"^@",13,"^Y",["^ ","^Z",["^ ","^1H",[["^1I","^1J"]]]],"^16",null,"^B",13,"^17","^P","^11",["^ ","^1K",["^ ","^5","^1H","^G",["^H",[["^1I","^1J"]]],"^F","derefable val if taken, nil if take was enqueued"]],"^18",["^4",[]],"^14",["^H",["@interface"]]],"~$Channel",["^ ","^>",["^ ","^X",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",21,"^A",14,"^@",20,"^Y",["^ ","^Z",["^ ","^S",[["^U"]],"~$closed?",[["^U"]]]],"^B",20,"^11",["^ ","~:close!",["^ ","^5","^S","^G",["^H",[["^U"]]],"^F",null],"~:closed?",["^ ","^5","^1N","^G",["^H",[["^U"]]],"^F",null]],"^14",["^H",["@interface"]]],"^X",true,"^5","^T","^?","out/cljs/core/async/impl/protocols.cljs","^C",21,"^A",1,"^@",20,"^Y",["^ ","^Z",["^ ","^S",[["^U"]],"^1N",[["^U"]]]],"^16",null,"^B",20,"^17","^P","^11",["^ ","^1O",["^ ","^5","^S","^G",["^H",[["^U"]]],"^F",null],"^1P",["^ ","^5","^1N","^G",["^H",[["^U"]]],"^F",null]],"^18",["^4",[]],"^14",["^H",["@interface"]]],"^1N",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",22,"^A",4,"^B",22,"^C",11,"^D","^T","^F",null,"^G",["^H",["^I",["^H",[["^U"]]]]]],"^D","^T","^5","~$cljs.core.async.impl.protocols/closed?","^?","out/cljs/core/async/impl/protocols.cljs","^C",11,"^K",["^H",[["^U"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",20,"^O","^P","^B",22,"^Q",1,"^R",true,"^G",["^H",["^I",["^H",[["^U"]]]]],"^F",null],"~$UnblockingBuffer",["^ ","^>",["^ ","^X",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",30,"^A",14,"^@",41,"^Y",["^ ","^Z",["^ "]],"^B",41,"^11",["^ "],"^14",["^H",["@interface"]]],"^X",true,"^5","~$cljs.core.async.impl.protocols/UnblockingBuffer","^?","out/cljs/core/async/impl/protocols.cljs","^C",30,"^A",1,"^@",41,"^Y",["^ ","^Z",["^ "]],"^16",null,"^B",41,"^17","^P","^11",["^ "],"^18",["^4",[]],"^14",["^H",["@interface"]]],"~$MAX-QUEUE-SIZE",["^ ","^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",11,"^A",14,"^B",11,"^C",28,"~:const",true],"^5","~$cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","^?","out/cljs/core/async/impl/protocols.cljs","^C",28,"~:const-expr",["^ ","~:op","^1U","~:val",1024,"~:env",["^ ","~:context","~:expr"],"~:form",1024,"^17","~$number"],"^A",1,"^1U",true,"^@",11,"^B",11,"^17","^22"],"^10",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",27,"^A",4,"^B",27,"^C",10,"^D","^15","^F","commit to fulfilling its end of the transfer, returns cb. Must be called within lock","^G",["^H",["^I",["^H",[["~$h"]]]]]],"^D","^15","^5","~$cljs.core.async.impl.protocols/commit","^?","out/cljs/core/async/impl/protocols.cljs","^C",10,"^K",["^H",[["~$h"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",24,"^O","^P","^B",27,"^Q",1,"^R",true,"^G",["^H",["^I",["^H",[["~$h"]]]]],"^F","commit to fulfilling its end of the transfer, returns cb. Must be called within lock"],"~$put!",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",17,"^A",4,"^B",17,"^C",8,"^D","~$cljs.core.async.impl.protocols/WritePort","^F","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val.","^G",["^H",["^I",["^H",[["^1I","~$val","^1J"]]]]]],"^D","^25","^5","~$cljs.core.async.impl.protocols/put!","^?","out/cljs/core/async/impl/protocols.cljs","^C",8,"^K",["^H",[["^1I","^26","^1J"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",16,"^O","^P","^B",17,"^Q",3,"^R",true,"^G",["^H",["^I",["^H",[["^1I","^26","^1J"]]]]],"^F","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."],"^1H",["^ ","^=",null,"^>",["^ ","^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^@",14,"^A",4,"^B",14,"^C",9,"^D","^1L","^F","derefable val if taken, nil if take was enqueued","^G",["^H",["^I",["^H",[["^1I","^1J"]]]]]],"^D","^1L","^5","~$cljs.core.async.impl.protocols/take!","^?","out/cljs/core/async/impl/protocols.cljs","^C",9,"^K",["^H",[["^1I","^1J"]]],"^L",null,"^M",["^H",[null,null]],"^A",1,"^N",false,"^@",13,"^O","^P","^B",14,"^Q",2,"^R",true,"^G",["^H",["^I",["^H",[["^1I","^1J"]]]]],"^F","derefable val if taken, nil if take was enqueued"],"~$WritePort",["^ ","^>",["^ ","^X",true,"^?","/home/nharsch/programming/living_clojure/cheshire-cat/out/cljs/core/async/impl/protocols.cljs","^C",23,"^A",14,"^@",16,"^Y",["^ ","^Z",["^ ","^24",[["^1I","^26","^1J"]]]],"^B",16,"^11",["^ ","~:put!",["^ ","^5","^24","^G",["^H",[["^1I","^26","^1J"]]],"^F","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."]],"^14",["^H",["@interface"]]],"^X",true,"^5","^25","^?","out/cljs/core/async/impl/protocols.cljs","^C",23,"^A",1,"^@",16,"^Y",["^ ","^Z",["^ ","^24",[["^1I","^26","^1J"]]]],"^16",null,"^B",16,"^17","^P","^11",["^ ","^2:",["^ ","^5","^24","^G",["^H",[["^1I","^26","^1J"]]],"^F","derefable boolean (false if already closed) if handled, nil if put was enqueued.\n                               Must throw on nil val."]],"^18",["^4",[]],"^14",["^H",["@interface"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"^F",null]